pipeline {
    agent any 

    environment {
        GIT_REPO = "https://github.com/thirumalai-py/k8-learner-frontend"
        AWS_REGION = "ap-south-1"
        ECR_REPO = "975050024946.dkr.ecr.ap-south-1.amazonaws.com/thirumalai-b10/learn-website"
        IMAGE_TAG = "dev-${BUILD_NUMBER}"
        AWS_ACCESS_KEY_ID = credentials('thiru-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('thiru-secret-access-key')
        CLUSTER_NAME = "thiru-cluster-1"
        API_ENDPOINT = "http://learn-api.webykart.in"
    }

    stages {

        stage("Checkout github repo") {
            steps{
                git(
                    url: "${GIT_REPO}",
                    branch: "main",
                    credentialsId: 'thiru-github-access'
                )
            }
        }

        stage("Build Docker image") {
            steps{
                sh """
                    echo "Building Docker image"
                    docker build -t ${ECR_REPO}:${IMAGE_TAG} .

                """
            }
        }

        stage("Login to ECR"){
            steps{
                sh """
                    export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                    export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                    export AWS_DEFAULT_REGION=${AWS_REGION}

                    echo "Login to ECR..."

                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO} 

                """
            }
        }

        stage("Push Docker Image to ECR") {
            steps{
                sh """
                    echo "Push the docker image to ECR..."

                    docker push ${ECR_REPO}:${IMAGE_TAG}
                    
                    echo "Image Pushed to ECR"
                """
            }
        }

        stage("Clean up docker Images") {
            steps {
                sh """
                    echo "Delete the docker images in jenkins"

                    docker rmi \$(docker images -q)
                """
            }
        }

        stage("Deploy to EKS") {
            steps {
                sh """
                    export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                    export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                    export AWS_DEFAULT_REGION=${AWS_REGION}
                    export KUBECONFIG=/tmp/kubeconfig

                    echo "Update Kubeconfig.."

                    aws eks update-kubeconfig \
                    --region ${AWS_REGION} \
                    --name ${CLUSTER_NAME} \
                    --kubeconfig \$KUBECONFIG

                    echo "Applying Helm..."

                    helm upgrade --install learn-website ./learn-website \
                    -f ./learn-website/values.yaml \
                    --set-string image.repository=${ECR_REPO} \
                    --set-string image.tag=${IMAGE_TAG} \
                    --set service.port=80 \
                    --set service.targetPort=3000 \
                    --set-string service.type="LoadBalancer" \
                    --set-string api_endpoint=${API_ENDPOINT} \
                    --set replicaCount=3 \
                    --kubeconfig \$KUBECONFIG

                """
            }
        }

    }
}